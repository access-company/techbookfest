= よくないレビューの例

== 審査員形式

//talklist{
//talk[chara_ema]{
実装終わったのでレビューお願いします！
//}
//talk[chara_maria]{
アメさん、見てあげれる？
//}
//talk[chara_ame]{
ちょっと今忙しくて…。ムチさんに見てもらってください。
//}
//talk[chara_ema]{
わかりました！
//}
//talk[chara_ema]{
（アメさんがよかったなぁ…。ムチさんちょっと怖いんだよな…）
//}
//}

こういうシーン、みなさんのプロジェクトでも心あたりあるかもしれません。なぜ、エマちゃんはアメさんにはお願いしやすくて、ムチさんにはお願いしにくいのでしょうか。

おや、そう言ってる間にムチさんからレビューコメントが返ってきたようです。

//list[00001][＠Muchi commented]{
NGです。レビュアーやテスターに伝わる説明を書く努力をしてください。
冗長コードも多すぎます。既存の全体設計を事前に見なかったのでしょうか。
ここはif-elseの判定が仕様と逆ですが、わざと壊そうとしていますか？
//}

〜翌日〜

//talklist{
//talk[chara_ema]{
（なんか体が重いなぁ。今日は午前休しよう…）
//}
//talk[chara_maria]{
あれっ、エマちゃんは今日どうしたの？
//}
//talk[chara_ame]{
午前休って連絡きてましたよ。
//}
//talk[chara_maria]{
あ、ホントだ。体が重いって言ってるのが気になるね。心当たりは？
//}
//talk[chara_ame]{
昨日、ムチさんのレビューを受けて、遅くまで修正していたようです。
//}
//talk[chara_maria]{
なるほど。何かあったのかな。レビュー記録を見てみよう。
//}
//talk[chara_maria]{
うーん、厳しい指摘が多いみたいだなぁ。スケジュールの心配もあるし、ムチさんに話を聞いてみよう。
//}
//}

エマちゃんが午前休を取ってしまったのは、甘えやメンタルが弱いからでしょうか。そう思われては気の毒ですよね。エマちゃんは自分なりによいものを作ろうと一生懸命取り組んでいたはずです。

マリアさんはムチさんを呼んで、コメントの真意を聞いてみました。

//talklist{
//talk[chara_maria]{
ムチさん、エマさんの実装ですが、何か大きな問題がありますか？
//}
//talk[chara_muchi]{
いえ、そこまでは。
//}
//talk[chara_maria]{
レビューの指摘が結構重たいようなんですが。
//}
//talk[chara_muchi]{
あれは、少し勉強不足を感じたので、自分で考えて成長してほしいと期待しました。
//}
//}

ムチさんの言い分もよくわかります。甘いだけではやっていけないのがプロの世界ですからね。

ですが、エマちゃんはやる気を削がれ、望まない理由で有休まで消費してしまいました。これはエマちゃんと会社の双方にとって、非常にもったいないことですよね。

では、このレビューはどうすればよかったのでしょうか。

//note[■審査員形式のレビューとは]{
・複数のレビュアーが辛口審査員のように振る舞う

・発表者のコードを攻撃的に批判する
//}

今回は、批評者はムチさんだけですが、エマちゃんが努力不足だったりよく考えずにやっている、さらに悪意があって間違えたなどと批判するかのようなコメントをしています。

これは発表者のメンタルを壊し、チームには鬱憤とやる気の低下が残るのみなのです。

//talklist{
//talk[chara_maria]{
（とはいえ、ムチさんは元々そういうスタイルの人で、悪気はないから注意するのもなぁ…。そうだ、アメさんにも見てもらおう）
//}
//talk[chara_maria]{
アメさーん！エマちゃんのコードレビュー、今日はOKですか？
//}
//talk[chara_ame]{
わかりました、今日は大丈夫です。
//}
//talk[chara_ame]{
（ムチさんと同じ指摘になるけど、伝え方を変えよう）
//}
//}

そして、アメさんのレビューコメントがつきました。

//list[00002][@Ame commented]{
ご対応ありがとうございます。実装箇所は合ってますが、いくつかお願いしたいことをMust/Wantで伝えますね。

Must: if-elseを仕様通りに直す
Want: 類似実装の共通化、誤りを未然に防ぐための単体テスト作成

説明文はフォーマットを使うとよいと思いますよ。
わからないところは過去のPRを参考にしてみてください。
//}

それを読んで、エマちゃんは午後からやる気を取り戻したのでした。

アメさんのコメントは、審査ではなく、実装者に寄り添うような提案をしていますね。良かった部分は認め、改善点は必須と任意を分けてヒントを出すに留め、実装者自身が考え学ぶ余地も残していますね。

//talklist{
//talk[chara_maria]{
（さすがアメさん、フォローが上手い！普段から心がけているのだろうか…）
//}
//}

エマちゃんは1年目で1つ1つの達成を自信に変えている段階なので、それを後退させるフィードバックはチーム力の後退にも繋がります。

気持ちのよいフィードバックとは、必ずしも全員一緒ではないのですが、コミュニケーションを重ねる中で、適切なバランスを見つけていきましょう。

== 試験形式

//talklist{
//talk[chara_ema]{
実装終わったけど今日はアメさん不在だし期限が近いからムチさんに出さなきゃ…。今度こそいいものを出そう！
//}
//}

//list[00001][＠Muchi commented]{
NGです。このAPIが例外を吐いたときの考慮がされていません。
typoがいくつかあるし、インデントも不揃いです。全体的に不合格。
//}

//talklist{
//talk[chara_ema]{
ぐすん…コンビニスイーツで元気になろう…。
//}
//}

ある日の朝会の後、マリアさんはエマちゃんを呼び止め、こう問いかけました。

//talklist{
//talk[chara_maria]{
エマちゃんが入って1ヶ月経ちましたね。何か困ってることありますか？
//}
//talk[chara_ema]{
私はどうすれば1人前になれるでしょうか。
//}
//talk[chara_maria]{
というと？
//}
//talk[chara_ema]{
ムチさん曰く私のレビューは不合格だそうで、早く合格して皆さんのお役に立ちたいんです。
//}
//talk[chara_maria]{
う〜ん、不合格とは厳しいなぁ…。
//}
//}

マリアさんはアメさんのところに行き、経緯を説明しました。

//talklist{
//talk[chara_maria]{
ということがあったんですが、アメさんはどう思いますか？
//}
//talk[chara_ame]{
エマちゃんは既に私たちのメンバーですし、私は不合格などと評価したりしないですよ。一度、本来の目的を思い出しましょう。
//}
//}

//note[■試験形式のレビューとは]{
・レビューの最後に「合格」「不合格」みたいな用語が飛び交う

・タイプミスや改善点を見つけて指摘することを、失敗の通達と捉えている
//}

これは知識が浅い人やニューフェイスがいると起こりがちです。

何かを書いて校正を頼むのは本来試験ではなく、同じ目的を持つ仲間による協力作業です。
今回であれば、エマちゃん、ムチさん、アメさん、マリアさんの4人は、立場こそ違えど「ユーザー満足度の高いソフトウェアにする」などの目的を共有しています。

それが試験形式になってしまうと、発表者はユーザーではなくレビュワーの満足度を高くすることに注力したり、試験に合格することが目的となり、本質からかけ離れてしまいます。
また、試験に落ちるという怖れからやる気を損ない、メンバーの協調的な和を乱すことにも繋がります。

//talklist{
//talk[chara_ame]{
今回は不必要な言及を避け、必要な指摘だけをするのが望ましいと思います。私ならこう書きますね。
//}
//}

//list[00001][＠Muchi commented]{
1. このAPIが例外を起こしたときの考慮
2. typoやインデントずれ
これらを直していただければ、残りはLGTMです。
//}

//talklist{
//talk[chara_maria]{
（この様子だと、アメさんをエマちゃんのメンター係にした方が良さそうだなぁ…）
//}
//}

== 意識高い系

それから1ヶ月経ち、エマちゃんは困ったことは何でもアメさんに相談し、順調にスキルアップしていきました。

そして、エマちゃんは少し大きな実装を任されました。
この間勉強したばかりのアーキテクチャーやデザインパターンを駆使し、わからないところはアメさんに質問しながら、なんとか仕上げました。

//talklist{
//talk[chara_ema]{
アメさん、色々とありがとうございました！
//}
//talk[chara_ame]{
いえいえ。早くマージできるといいですね！
//}
//talk[chara_ema]{
（今回はアメさんの言う通りに作ったし、ムチさんも納得してくれるはず…！）
//}
//}

エマちゃんはルンルン気分でPRを作り、退社しました。水曜日に早く上がったので、ウェンズデーで見たかった映画を見たり、美味しいものを食べ、オフをエンジョイしました。

翌日、出社するとムチさんの指摘が入っていました。

//list[00001][＠Muchi commented]{
この判定はビジネスロジックなので、サービスクラスでやる仕事じゃないです。もっとドメインを意識して書き直して下さい。
doTask()に2つ以上の責務があり意味不明です。
//}

//talklist{
//talk[chara_ema]{
(ぐす…アメさんに色々聞いて頑張ったのに…)
//}
//talk[chara_ame]{
エマちゃん、あの件は無事終わりましたか？
//}
//talk[chara_ema]{
アメさーん！（泣）
//}
//talk[chara_ame]{
ど、どうしたんですか！？
//}
//}

アメさんは泣くエマちゃんを必死になだめました。

その日の午後、アメさんがマリアさんに呼ばれました。

//talklist{
//talk[chara_maria]{
エマちゃんと1on1をしたんですが、ちょっと自信を失ってるようですね。
//}
//talk[chara_ame]{
はい、私が見てOKでレビューに出してもらったんですが、ムチさんにとってはNGだったようで…。
//}
//talk[chara_maria]{
レビューのチェックリストは2人とも同じなんですよね？
//}
//talk[chara_ame]{
はい。ただ私はそこまで関心の分離を徹底しようと思ってなかったんですが、ムチさんは徹底したかったようです。
//}
//talk[chara_maria]{
まぁ、その辺のこだわりは、人によって多少は異なりますからね。
//}
//talk[chara_ame]{
それに、エマちゃんは何も考えてないわけじゃなく、エマちゃんなりの考えでこういう記述にしてるなと私は思いました。
//}
//talk[chara_ame]{
だから、今はそれでOKを出して、高度な実装は追々学んで欲しかったんですよね。
//}
//talk[chara_maria]{
ステップも大事ですからね。
//}
//talk[chara_ame]{
ムチさんのフィードバックは、エマちゃんが頑張って書いた成果物を、突き放すような言い方だったのが気になりました。
//}
//}

//note[■意識高い系のレビューとは]{
・突き放す感じの指摘で、具体的な修正指示が含まれていない

・タイプミスや改善点を見つけて指摘することを、失敗の通達と捉えている
//}

どんな実装にも、レビュイーにとってはベストの実装だったり、レビュイーなりの考えがあることが多いので、否定だけはよくありません。具体的な修正指示や例を出してあげる方が親切です。

また、答えをそのまま教えればよいとも限りません。あくまで「例」を示し、レビュイーが自分で考え、答えはネットや本で見つけるほうが、スキルアップやモチベーションに繋がることがあります。

（ここで4コマ漫画を挿入したい。ストーリーは、マリアさんがみんなをランチに誘ったらムチさんが「大丈夫です」と断る。「大丈夫ですってなにー！？」ってツッコミが入る）

== 持久戦

さて、レビューを受けるのはエマちゃんだけではありません。

マリアさんとアメさんは、今後のプロジェクト計画についてプロジェクト責任者やステークホルダーたちと対面でのレビューを受けました。しかし、その会議は予定終了時刻を2時間もオーバーした上、いくつかの議論は行われませんでした。

//talklist{
//talk[chara_maria]{
遅くまでお疲れ様でしたね。
//}
//talk[chara_ame]{
あの方々とやると、いつも予定時間を超えますよね〜。
//}
//talk[chara_ame]{
それに最初は段取り良かったけど、途中から同じ話の繰り返しでした。
//}
//talk[chara_maria]{
終わりのほうは、結構みなさんも疲れてましたね。
//}
//talk[chara_ame]{
しかも結論がいくつか出てないと思うので、別の日に再レビューすることになりそうです。
//}
//talk[chara_maria]{
1時間で切り上げてもそんなに変わらなかったですね。
//}
//talk[chara_ame]{
決めた予定だから最後までやりたかったんでしょうね。
//}
//talk[chara_maria]{
彼らは今頃、やった！という満足だけが残ってるでしょう。
//}
//}

実はこのレビュー、マリアさんの言うとおり向こうは満足していたわけではなく、レビュアー側も同じようなことを感じていたのでした。

つまり、誰か特定の人の振る舞いが良くなかったわけではなく、お互いにこのまま続けると非効率とわかっていながら、引っ込みがつかなかったのです。

//note[■持久戦のレビューとは]{
・やたらと長く、予定を超過する

・最初はやる気があっても、時間が経つと疲れる

・発表者もレビュアーも、時間が経つにつれ不注意になるが、切り上げられない

・体力を吸われ、レビューの精度も低くなる

・充実感を伴って終わり、本質的な問題に気づかない
//}

とはいえ、対面での議論を途中で切り上げるのは、思い切りの要ることです。スケジュール調整も必要なので容易ではありません。

最初に「この場ではこれだけ話す！」「議題が逸れたらチャットツールやチケットなど、非同期な方法で続きを議論する」など、あらかじめ合意しておくことが重要でしょう。


== 今後のストーリーの流れ

 * ムチさんにフォーカスした回。360度評価でコミュニケーション面での指摘が付き、自問自答しながらやり方を考え直す
 * リモートワークになり、みんなのコミュニケーションが希薄になったところでトラブルが発生し、緊急のコードレビューでバタバタする回
